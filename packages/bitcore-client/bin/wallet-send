#!/usr/bin/env node

'use strict';

const program = require('commander');
const { Wallet } = require('../ts_build/src/wallet');
const promptly = require('promptly');
const https = require('https');

program
  .version(require('../package.json').version)
  .requiredOption('--name <name>', 'REQUIRED - Wallet Name')
  .requiredOption('--to <to>', 'REQUIRED - String address')
  .requiredOption('--amount <amount>', 'REQUIRED - Number amount (in btc/bch/eth/xrp)')
  .option('--token <token>', 'optional - ERC-20 token to send')
  .option('--feeRate <rate>', 'optional - Fee rate in sats/KB (UTXO) or Gwei (EVM)')
  .option('--storageType <storageType>', 'optional - Name of the database to use (default Level)')
  .option('--path <path>', 'optional - Custom wallet storage path')
  .parse(process.argv);

const main = async () => {
  const { name, path, to, amount, token, storageType } = program.opts();
  let { feeRate: feeRateParam } = program.opts();
  let wallet;
  let data;
  try {
    data = await getCurrencies();
  } catch (err) {
    console.error(err);
  }
  const currencies = JSON.parse(data);
  try {
    wallet = await Wallet.loadWallet({ name, path, storageType });
    const chain = wallet.chain;
    const currency = token || chain;
    const { decimals } = currencies.data.find(element => element.code === currency);
    const scale = Math.pow(10, decimals);
    const lastAddress = await wallet.deriveAddress(0);
    const recipients = [{ address: to, amount: amount * scale }];
    let feeRate = feeRateParam;
    if (!feeRate) {
      const feerate = await wallet.getNetworkFee();
      feeRate = JSON.parse(feerate).feerate;
    }
    let nonce;
    if (!['BTC', 'BCH', 'DOGE', 'LTC'].includes(chain)) {
      nonce = await wallet.getNonce();
      feeRate = Math.ceil(feeRateParam == null ? feeRate : (feeRateParam * 1e9)); // convert feeRateParam from Gwei to Wei
    } else {
      feeRate = Math.ceil(feeRateParam == null ? (feeRate * scale / 1000) : feeRateParam); // convert feeRate from BTC to sats/KB
    }
    const utxos = await wallet.getUtxosArray();
    const params = {
      feeRate,
      nonce: Number(nonce),
      utxos,
      recipients,
      from: lastAddress,
      token
    }; 
    params.change = !wallet.isUtxoChain() ? null : wallet.deriveAddress(wallet.addressIndex, true);
    const changeIdx = params.change ? wallet.addressIndex : null;
    const tx = await wallet.newTx(params);
    console.log('unsignedRawTx: ', tx);
    const passphrase = await promptly.password('Wallet Password:');
    wallet = await wallet.unlock(passphrase);
    const signedTx = await wallet.signTx({ tx, passphrase, changeAddressIdx: changeIdx });
    console.log('signedRawTx: ', signedTx);
    const confirmed = await promptly.confirm('broadcast? (y/n)');
    if (!confirmed) {
      return;
    }
    const transaction = await wallet.broadcast({ tx:signedTx });
    console.log('txid: ', transaction.txid);
    console.log('Transaction broadcasted');
  } catch (e) {
    console.error(e);
  }
};

function getCurrencies() {
  return new Promise((resolve, reject) => {
    https.get('https://bitpay.com/currencies', res => {
      if (res.statusCode !== 200) {
        reject(new Error('Request Failed'));
      }
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      res.on('end', () => resolve(data.toString()));
    });
  });
}

main();
